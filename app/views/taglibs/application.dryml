<!-- Global taglib - these tags are shared across all subsites -->
<include src="rapid" gem="hobo"/>

<include src="taglibs/auto/rapid/cards"/>
<include src="taglibs/auto/rapid/pages"/>
<include src="taglibs/auto/rapid/forms"/>

<set-theme name="clean"/>

<extend tag="show-page" for="Activity">
  <old-show-page merge>
    <new-link:>
      New Page
    </new-link:>
  </old-show-page>
</extend>

<extend tag="show-page" for="Page">
  <old-show-page>
    <field-list: skip="position" />
  </old-show-page>
</extend>

<def tag="card" for="PagePane">
  <!-- By default a recursive tag inside a polymorphic definition just calls the base card 
       So we have to explicitly set the type-->
  <card:pane for-type="&this.pane.class">
    <append-heading:>
      (<%= this.class %>)
    </append-heading:>
  </card:pane>
</def>

<def tag="card" for="PageSequence">
  <!-- By default a recursive tag inside a polymorphic definition just calls the base card 
       So we have to explicitly set the type-->
  <card:sequence for-type="&this.sequence.class">
    <append-heading:>
      (<%= this.class %>)
    </append-heading:>
  </card:sequence>
</def>

<extend tag="form" for="Page">
  <old-form merge>
    <field-list: fields="name, text" /> 
    <after-field-list:>
      <sortable-collection:page_panes/>
      <a action="new" to="&this.image_panes">
        <ht key="image_pane.actions.new" >New Image Pane</ht>
      </a>
      |
      <a action="new" to="&this.predefined_graph_panes">
        <ht key="predefined_graph_pane.actions.new" >New Predefined Graph Pane</ht>
      </a>
      |
      <a action="new" to="&this.table_panes">
        <ht key="table_pane.actions.new" >New Table Pane</ht>
      </a>
      <collection:page_sequences/>
      <a action="new" to="&this.instruction_sequences">
        <ht key="instruction_sequence.actions.new" >New Instruction Sequence</ht>
      </a>
    </after-field-list:>
  </old-form>
</extend>